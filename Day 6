242.有效的字母异位词 

每个词遍历一遍，第一次用table记录每个字母出现的次数，第二次每出现一次减一
最后一次遍历table，如果有不为0的value，则return False，else return True
重点是可以用orb[letter] - ord['a']获得一个值来代表字母

def isAnagram(self, s: str, t: str) -> bool:
    record = [0] * 26
    for i in s:
        record[ord(i) - ord('a')] += 1
    for i in t:
        record[ord(i) - ord('a')] -= 1
    
    for i in range(26):
        if record[i] != 0:
            return False 
    
    return True

349. 两个数组的交集 

和上题思路类似，用哈希表记录出现与否

def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
    table = {}

    for i in nums1:
        table[i] = table.get(i, 0) + 1
    
    res = []
    for i in nums2:
        if i in table:
            res.append(i)
            del table[i]
    
    return res

202. 快乐数

重点是1. 计算sum的方法，2. sum值会出现循环
def isHappy(self, n: int) -> bool:
    def getSum(n):
        sum = 0 
        while n:
            sum += (n % 10) * (n % 10)
            n = n // 10

        return sum
    
    past_sum = set()
    
    while True:
        n = getSum(n)
        if n == 1:
            return True
        elif n in past_sum:
            return False
        else: 
            past_sum.add(n)


1. 两数之和 

Abandon 不谈

def twoSum(self, nums: List[int], target: int) -> List[int]:
        table = {}
        for i in range(len(nums)):
            comp = target - nums[i] 
            if comp in table:
                return [i, table[comp]]
            else: 
                table[nums[i]] = i
        
        return [0, 0]
