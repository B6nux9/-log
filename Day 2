209. 长度最小的自数组

滑动窗口，我个人看成快慢指针的其中一种应用。
循环条件是快指针到达数组末尾，也就是while fast < len(nums):
在fast向后移动过程中，slow的指针向前移动的条件是当前窗口内的和 <= target

def minSubArrayLen(self, target: int, nums: List[int]) -> int:
    slow = fast = 0
    cur_sum = 0
    min_len = float('inf')
    l = len(nums)

    while fast < l:
        cur_sum += nums[fast]
        
        while cur_sum >= target:
            min_len = min(min_len, fast - slow + 1)
            cur_sum -= nums[slow]
            slow += 1
        
        fast += 1
    
    return min_len if min_len != float('inf') else 0

59. 螺旋矩阵

这道题很考验代码基本功，其逻辑本身不复杂，但是对于不同case的分析，以及边界值的定义还是很有挑战的。

def generateMatrix(self, n: int) -> List[List[int]]:
        nums = [[0] * n for _ in range(n)]
        startx, starty = 0, 0
        loop, mid = n // 2, n // 2
        count = 1

        for offset in range(1, loop + 1):
            for i in range(starty, n - offset):
                nums[startx][i] = count
                count += 1
            for i in range(startx, n - offset):
                nums[i][n - offset] = count
                count += 1
            for i in range(n - offset, starty, -1):
                nums[n - offset][i] = count
                count += 1
            for i in range(n - offset, startx, -1):
                nums[i][starty] = count
                count += 1
            startx += 1
            starty += 1

        if n % 2 != 0:
            nums[mid][mid] = count

        return nums

第三道题没太看懂，明早起来再继续研究
