454.四数相加II 

先遍历前两个数组，用table记录之和出现的次数
后遍历后两个数组，在table找 -i -j，如果出现对应key，则count += value

def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
    table = {}
    
    for i in nums1:
        for j in nums2:
            table[i + j] = table.get(i + j, 0) + 1
    
    count = 0

    for i in nums3:
        for j in nums4:
            if -i - j in table:
                count += table[-i - j]
    
    return count


383. 赎金信

简单题 不谈

def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        table = {}
        for i in magazine:
            table[i] = table.get(i, 0) + 1

        for i in ransomNote:
            if i not in table or table[i] == 0:
                return False
            else:
                table[i] -= 1
        
        return True


15. 三数之和 

用i遍历数组，循环中加入双指针的思路，left 和 right逐渐逼近，寻找和为0的组合
遍历时注意剪枝思路
如果nums[i] > 0 直接return
如果i > 0 and nums[i] == nums[i - 1]说明此数已经由上一个数统计过，也跳过

def threeSum(self, nums: List[int]) -> List[List[int]]:
    res = []
    nums.sort()

    for i in range(len(nums)):
        if nums[i] > 0:
            return res

        if i > 0 and nums[i] == nums[i - 1]:
            continue 

        left = i + 1
        right = len(nums) - 1

        while left < right:
            sum_ = nums[i] + nums[left] + nums[right]
            if sum_ > 0:
                right -= 1
            elif sum_ < 0:
                left += 1
            else:
                res.append([nums[i], nums[left], nums[right]])

                while left < right and nums[right] == nums[right - 1]:
                    right -= 1
                while left < right and nums[left] == nums[left + 1]:
                    left += 1
                
                left += 1
                right -= 1
    
    return res


 18. 四数之和  

思路和三数之和有点像，区别在于外面套一层遍历，同时因为和不为0，所以在循环中剪枝的条件需要细想。

def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
    nums.sort()
    n = len(nums)
    result = []

    for i in range(n):
        if nums[i] > target and nums[i] > 0:
            break
        if i > 0 and nums[i] == nums[i - 1]:
            continue 
        for j in range(i + 1, n):
            if nums[i] + nums[j] > target and target > 0:
                break
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue 
            left, right = j + 1, n - 1

            while left < right:
                s = nums[i] + nums[j] + nums[left] + nums[right]
                if s == target:
                    result.append([nums[i], nums[j], nums[left], nums[right]])
                    while left < right and nums[left] == nums[left + 1]:
                        left += 1
                    while left < right and nums[right] == nums[right - 1]:
                        right -= 1
                    left += 1
                    right -=1
                elif s < target:
                    left += 1
                else:
                    right -= 1
        
    return result 
