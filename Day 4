24. 两两交换链表中的节点

重点在于1. 用dummy节点保存头节点，2. 用temp和temp1保存cur.next和cur.next.next.next。

def swapPairs(self, head: ListNode) -> ListNode:
    dummy_head = ListNode(next=head)
    current = dummy_head
    
    # 必须有cur的下一个和下下个才能交换，否则说明已经交换结束了
    while current.next and current.next.next:
        temp = current.next # 防止节点修改
        temp1 = current.next.next.next
        
        current.next = current.next.next
        current.next.next = temp
        temp.next = temp1
        current = current.next.next
    return dummy_head.next

19. 删除链表的倒数第N个节点

快慢指针，先将fast移到n+1的位置，然后一起遍历，当fast到结尾，则slow在倒数第n个

def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
    # 创建一个虚拟节点，并将其下一个指针设置为链表的头部
    dummy_head = ListNode(0, head)
    
    # 创建两个指针，慢指针和快指针，并将它们初始化为虚拟节点
    slow = fast = dummy_head
    
    # 快指针比慢指针快 n+1 步
    for i in range(n+1):
        fast = fast.next
    
    # 移动两个指针，直到快速指针到达链表的末尾
    while fast:
        slow = slow.next
        fast = fast.next
    
    # 通过更新第 (n-1) 个节点的 next 指针删除第 n 个节点
    slow.next = slow.next.next
    
    return dummy_head.next

160. 链表相交

先计算两个链表的长度，然后将长的建立一个指针，向后遍历直到和短的同样长度。接着遍历，对比两个节点是否相同。

def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
    lenA, lenB = 0, 0
    cur = headA
    while cur:         # 求链表A的长度
        cur = cur.next 
        lenA += 1
    cur = headB 
    while cur:         # 求链表B的长度
        cur = cur.next 
        lenB += 1
    curA, curB = headA, headB
    if lenA > lenB:     # 让curB为最长链表的头，lenB为其长度
        curA, curB = curB, curA
        lenA, lenB = lenB, lenA 
    for _ in range(lenB - lenA):  # 让curA和curB在同一起点上（末尾位置对齐）
        curB = curB.next 
    while curA:         #  遍历curA 和 curB，遇到相同则直接返回
        if curA == curB:
            return curA
        else:
            curA = curA.next 
            curB = curB.next
    return None 

142. 环形链表

第一部分思路很简单，用快慢指针便能确定是否有环。但是第二部分数学，我只能看推导才能明白，自己想是想不出来的。

def detectCycle(self, head: ListNode) -> ListNode:
      slow = head
      fast = head
      
      while fast and fast.next:
          slow = slow.next
          fast = fast.next.next
          
          # If there is a cycle, the slow and fast pointers will eventually meet
          if slow == fast:
              # Move one of the pointers back to the start of the list
              slow = head
              while slow != fast:
                  slow = slow.next
                  fast = fast.next
              return slow
      # If there is no cycle, return None
      return None
